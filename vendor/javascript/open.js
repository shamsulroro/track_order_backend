import t from"util";import e from"path";import o from"child_process";import r from"fs";import n from"is-wsl";import s from"is-docker";import i from"process";import a from"buffer";var c={};var l=a.Buffer;var p=i;const{promisify:f}=t;const m=e;const u=o;const w=r;const d=n;const h=s;const g=f(w.access);const x=f(w.readFile);const y=m.join(new URL(import.meta.url.slice(0,import.meta.url.lastIndexOf("/"))).pathname,"xdg-open");
/**
Get the mount point for fixed drives in WSL.

@inner
@returns {string} The mount point.
*/const v=(()=>{const t="/mnt/";let e;return async function(){if(e)return e;const o="/etc/wsl.conf";let r=false;try{await g(o,w.constants.F_OK);r=true}catch(t){}if(!r)return t;const n=await x(o,{encoding:"utf8"});const s=/root\s*=\s*(.*)/g.exec(n);if(!s)return t;e=s[1].trim();e=e.endsWith("/")?e:e+"/";return e}})();c=async(t,e)=>{if("string"!==typeof t)throw new TypeError("Expected a `target`");e={wait:false,background:false,allowNonzeroExitCode:false,...e};let o;let{app:r}=e;let n=[];const s=[];const i={};if(Array.isArray(r)){n=r.slice(1);r=r[0]}if("darwin"===p.platform){o="open";e.wait&&s.push("--wait-apps");e.background&&s.push("--background");r&&s.push("-a",r)}else if("win32"===p.platform||d&&!h()){const a=await v();o=d?`${a}c/Windows/System32/WindowsPowerShell/v1.0/powershell.exe`:`${p.env.SYSTEMROOT}\\System32\\WindowsPowerShell\\v1.0\\powershell`;s.push("-NoProfile","-NonInteractive","â€“ExecutionPolicy","Bypass","-EncodedCommand");d||(i.windowsVerbatimArguments=true);const c=["Start"];e.wait&&c.push("-Wait");if(r){c.push(`"\`"${r}\`""`,"-ArgumentList");n.unshift(t)}else c.push(`"${t}"`);if(n.length>0){n=n.map((t=>`"\`"${t}\`""`));c.push(n.join(","))}t=l.from(c.join(" "),"utf16le").toString("base64")}else{if(r)o=r;else{const t=!new URL(import.meta.url.slice(0,import.meta.url.lastIndexOf("/"))).pathname||"/"===new URL(import.meta.url.slice(0,import.meta.url.lastIndexOf("/"))).pathname;let e=false;try{await g(y,w.constants.X_OK);e=true}catch(t){}const r=p.versions.electron||"android"===p.platform||t||!e;o=r?"xdg-open":y}n.length>0&&s.push(...n);if(!e.wait){i.stdio="ignore";i.detached=true}}s.push(t);"darwin"===p.platform&&n.length>0&&s.push("--args",...n);const a=u.spawn(o,s,i);if(e.wait)return new Promise(((t,o)=>{a.once("error",o);a.once("close",(r=>{e.allowNonzeroExitCode&&r>0?o(new Error(`Exited with code ${r}`)):t(a)}))}));a.unref();return a};var E=c;export default E;

