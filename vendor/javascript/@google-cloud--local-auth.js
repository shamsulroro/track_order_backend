import*as e from"google-auth-library";import*as t from"http";import*as r from"url";import*as n from"open";import*as o from"arrify";import*as a from"server-destroy";var i="default"in e?e.default:e;var s="default"in t?t.default:t;var c="default"in r?r.default:r;var l="default"in n?n.default:n;var d="default"in o?o.default:o;var u="default"in a?a.default:a;var f={};function _nullRequire(e){var t=new Error("Cannot find module '"+e+"'");t.code="MODULE_NOT_FOUND";throw t}Object.defineProperty(f,"__esModule",{value:true});f.authenticate=void 0;const h=i;const p=s;const m=c;const y=l;const v=d;const _=u;const w="The provided keyfile does not define a valid\nredirect URI. There must be at least one redirect URI defined, and this sample\nassumes it redirects to 'http://localhost:3000/oauth2callback'.  Please edit\nyour keyfile, and add a 'redirect_uris' section.  For example:\n\n\"redirect_uris\": [\n  \"http://localhost:3000/oauth2callback\"\n]\n";function isAddressInfo(e){return void 0!==e.port}async function authenticate(e){var t;if(!e||!e.keyfilePath||"string"!==typeof e.keyfilePath)throw new Error("keyfilePath must be set to the fully qualified path to a GCP credential keyfile.");const r=_nullRequire(e.keyfilePath);const n=r.installed||r.web;if(!n.redirect_uris||0===n.redirect_uris.length)throw new Error(w);const o=new m.URL(null!==(t=n.redirect_uris[0])&&void 0!==t?t:"http://localhost");if("localhost"!==o.hostname)throw new Error(w);const a=new h.OAuth2Client({clientId:n.client_id,clientSecret:n.client_secret});return new Promise(((t,n)=>{const i=p.createServer((async(e,r)=>{try{const s=new m.URL(e.url,"http://localhost:3000");if(s.pathname!==o.pathname){r.end("Invalid callback URL");return}const c=s.searchParams;if(c.has("error")){r.end("Authorization rejected.");n(new Error(c.get("error")));return}if(!c.has("code")){r.end("No authentication code provided.");n(new Error("Cannot read authentication code."));return}const l=c.get("code");const{tokens:d}=await a.getToken({code:l,redirect_uri:o.toString()});a.credentials=d;t(a);r.end("Authentication successful! Please return to the console.")}catch(e){n(e)}finally{i.destroy()}}));let s=3e3;r.installed?s=0:""!==o.port&&(s=Number(o.port));i.listen(s,(()=>{const t=i.address();isAddressInfo(t)&&(o.port=String(t.port));const r=v(e.scopes||[]);const n=a.generateAuthUrl({redirect_uri:o.toString(),access_type:"offline",scope:r.join(" ")});y(n,{wait:false}).then((e=>e.unref()))}));_(i)}))}f.authenticate=authenticate;const k=f.__esModule;const g=f.authenticate;export{k as __esModule,g as authenticate,f as default};

